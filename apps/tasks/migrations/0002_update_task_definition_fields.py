# Generated by Django 5.2.6 on 2025-09-14 14:08

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("tasks", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="任务名称"),
                ),
                ("description", models.TextField(blank=True, verbose_name="任务描述")),
                (
                    "trigger_method",
                    models.CharField(
                        choices=[
                            ("periodic", "周期触发"),
                            ("scheduled", "定时触发"),
                            ("immediate", "立即触发"),
                            ("manual", "手动触发"),
                            ("dependent", "依赖触发"),
                        ],
                        max_length=20,
                        verbose_name="触发方式",
                    ),
                ),
                (
                    "task_target",
                    models.CharField(
                        choices=[
                            ("stock_data_update", "股票数据更新"),
                            ("ai_analysis", "AI分析"),
                        ],
                        max_length=30,
                        verbose_name="任务目标",
                    ),
                ),
                (
                    "stock_targets",
                    models.TextField(blank=True, verbose_name="股票目标列表(JSON格式)"),
                ),
                (
                    "task_module",
                    models.CharField(max_length=200, verbose_name="任务模块路径"),
                ),
                (
                    "task_function",
                    models.CharField(max_length=100, verbose_name="任务函数名"),
                ),
                (
                    "task_args",
                    models.TextField(blank=True, verbose_name="任务参数(JSON格式)"),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "低"),
                            ("normal", "普通"),
                            ("high", "高"),
                            ("critical", "紧急"),
                        ],
                        default="normal",
                        max_length=20,
                        verbose_name="优先级",
                    ),
                ),
                (
                    "timeout_seconds",
                    models.IntegerField(
                        default=3600,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="超时时间(秒)",
                    ),
                ),
                (
                    "max_retries",
                    models.IntegerField(
                        default=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="最大重试次数",
                    ),
                ),
                (
                    "retry_delay_seconds",
                    models.IntegerField(
                        default=60,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="重试延迟(秒)",
                    ),
                ),
                (
                    "interval_seconds",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="间隔秒数",
                    ),
                ),
                (
                    "cron_expression",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Cron表达式"
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="Asia/Shanghai", max_length=50, verbose_name="时区"
                    ),
                ),
                (
                    "execute_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="执行时间"),
                ),
                (
                    "is_singleton",
                    models.BooleanField(default=False, verbose_name="是否单例执行"),
                ),
                (
                    "allow_overlap",
                    models.BooleanField(default=False, verbose_name="是否允许重叠执行"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "激活"),
                            ("inactive", "未激活"),
                            ("paused", "暂停"),
                            ("error", "错误"),
                            ("archived", "已归档"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否启用")),
                (
                    "total_executions",
                    models.IntegerField(default=0, verbose_name="总执行次数"),
                ),
                (
                    "success_executions",
                    models.IntegerField(default=0, verbose_name="成功执行次数"),
                ),
                (
                    "failed_executions",
                    models.IntegerField(default=0, verbose_name="失败执行次数"),
                ),
                (
                    "last_execution_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="最后执行时间"),
                ),
                (
                    "next_execution_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="下次执行时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tasks.taskcategory",
                        verbose_name="任务分类",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务定义",
                "verbose_name_plural": "任务定义",
                "db_table": "task_definition_enhanced",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskDependencyEnhanced",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dependency_type",
                    models.CharField(
                        choices=[
                            ("success", "成功后执行"),
                            ("failure", "失败后执行"),
                            ("always", "总是执行"),
                            ("condition", "条件执行"),
                        ],
                        default="success",
                        max_length=20,
                        verbose_name="依赖类型",
                    ),
                ),
                (
                    "condition_expression",
                    models.TextField(blank=True, verbose_name="条件表达式"),
                ),
                (
                    "delay_seconds",
                    models.IntegerField(default=0, verbose_name="延迟执行(秒)"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否启用")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "child_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_dependencies",
                        to="tasks.taskdefinition",
                        verbose_name="子任务",
                    ),
                ),
                (
                    "parent_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_dependencies",
                        to="tasks.taskdefinition",
                        verbose_name="父任务",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务依赖关系",
                "verbose_name_plural": "任务依赖关系",
                "db_table": "task_dependency_enhanced",
            },
        ),
        migrations.CreateModel(
            name="TaskExecutionEnhanced",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "execution_id",
                    models.CharField(max_length=100, unique=True, verbose_name="执行ID"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "等待执行"),
                            ("running", "执行中"),
                            ("success", "执行成功"),
                            ("failed", "执行失败"),
                            ("timeout", "执行超时"),
                            ("cancelled", "已取消"),
                            ("retry", "重试中"),
                            ("skipped", "已跳过"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="执行状态",
                    ),
                ),
                ("scheduled_time", models.DateTimeField(verbose_name="计划执行时间")),
                (
                    "start_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="开始时间"),
                ),
                (
                    "end_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="结束时间"),
                ),
                (
                    "duration_seconds",
                    models.FloatField(blank=True, null=True, verbose_name="执行时长(秒)"),
                ),
                ("result_data", models.TextField(blank=True, verbose_name="执行结果")),
                ("output_data", models.TextField(blank=True, verbose_name="输出数据")),
                ("error_message", models.TextField(blank=True, verbose_name="错误信息")),
                ("traceback_info", models.TextField(blank=True, verbose_name="错误堆栈")),
                ("retry_count", models.IntegerField(default=0, verbose_name="重试次数")),
                ("max_retries", models.IntegerField(default=3, verbose_name="最大重试次数")),
                (
                    "worker_name",
                    models.CharField(blank=True, max_length=100, verbose_name="执行节点"),
                ),
                (
                    "worker_pid",
                    models.IntegerField(blank=True, null=True, verbose_name="进程ID"),
                ),
                (
                    "memory_usage_mb",
                    models.FloatField(blank=True, null=True, verbose_name="内存使用(MB)"),
                ),
                (
                    "cpu_usage_percent",
                    models.FloatField(blank=True, null=True, verbose_name="CPU使用率(%)"),
                ),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("auto", "自动触发"),
                            ("manual", "手动触发"),
                            ("api", "API触发"),
                            ("dependency", "依赖触发"),
                        ],
                        default="auto",
                        max_length=20,
                        verbose_name="触发类型",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.taskdefinition",
                        verbose_name="关联任务",
                    ),
                ),
                (
                    "triggered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="触发者",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务执行记录",
                "verbose_name_plural": "任务执行记录",
                "db_table": "task_execution_enhanced",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskLogEnhanced",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("DEBUG", "DEBUG"),
                            ("INFO", "INFO"),
                            ("WARNING", "WARNING"),
                            ("ERROR", "ERROR"),
                            ("CRITICAL", "CRITICAL"),
                        ],
                        max_length=10,
                        verbose_name="日志级别",
                    ),
                ),
                ("message", models.TextField(verbose_name="日志消息")),
                (
                    "module",
                    models.CharField(blank=True, max_length=100, verbose_name="模块名"),
                ),
                (
                    "function",
                    models.CharField(blank=True, max_length=100, verbose_name="函数名"),
                ),
                (
                    "line_number",
                    models.IntegerField(blank=True, null=True, verbose_name="行号"),
                ),
                (
                    "extra_data",
                    models.TextField(blank=True, verbose_name="额外数据(JSON格式)"),
                ),
                (
                    "tags",
                    models.CharField(blank=True, max_length=200, verbose_name="标签"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, verbose_name="时间戳"),
                ),
                (
                    "task_execution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.taskexecutionenhanced",
                        verbose_name="任务执行记录",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务日志",
                "verbose_name_plural": "任务日志",
                "db_table": "task_log_enhanced",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TaskMetricsEnhanced",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="日期")),
                (
                    "total_executions",
                    models.IntegerField(default=0, verbose_name="总执行次数"),
                ),
                (
                    "success_executions",
                    models.IntegerField(default=0, verbose_name="成功次数"),
                ),
                (
                    "failed_executions",
                    models.IntegerField(default=0, verbose_name="失败次数"),
                ),
                (
                    "timeout_executions",
                    models.IntegerField(default=0, verbose_name="超时次数"),
                ),
                (
                    "cancelled_executions",
                    models.IntegerField(default=0, verbose_name="取消次数"),
                ),
                (
                    "avg_duration_seconds",
                    models.FloatField(blank=True, null=True, verbose_name="平均执行时长(秒)"),
                ),
                (
                    "max_duration_seconds",
                    models.FloatField(blank=True, null=True, verbose_name="最大执行时长(秒)"),
                ),
                (
                    "min_duration_seconds",
                    models.FloatField(blank=True, null=True, verbose_name="最小执行时长(秒)"),
                ),
                (
                    "avg_memory_usage_mb",
                    models.FloatField(blank=True, null=True, verbose_name="平均内存使用(MB)"),
                ),
                (
                    "max_memory_usage_mb",
                    models.FloatField(blank=True, null=True, verbose_name="最大内存使用(MB)"),
                ),
                (
                    "avg_cpu_usage_percent",
                    models.FloatField(
                        blank=True, null=True, verbose_name="平均CPU使用率(%)"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.taskdefinition",
                        verbose_name="关联任务",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务执行指标",
                "verbose_name_plural": "任务执行指标",
                "db_table": "task_metrics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="TaskScheduleEnhanced",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "schedule_type",
                    models.CharField(
                        choices=[
                            ("interval", "间隔调度"),
                            ("cron", "Cron调度"),
                            ("date", "日期调度"),
                        ],
                        max_length=20,
                        verbose_name="调度类型",
                    ),
                ),
                (
                    "interval_seconds",
                    models.IntegerField(blank=True, null=True, verbose_name="间隔秒数"),
                ),
                (
                    "cron_expression",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Cron表达式"
                    ),
                ),
                (
                    "run_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="运行日期"),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="Asia/Shanghai", max_length=50, verbose_name="时区"
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="开始日期"),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="结束日期"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否启用")),
                (
                    "last_run_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="最后运行时间"),
                ),
                (
                    "next_run_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="下次运行时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "task",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.taskdefinition",
                        verbose_name="关联任务",
                    ),
                ),
            ],
            options={
                "verbose_name": "任务调度配置",
                "verbose_name_plural": "任务调度配置",
                "db_table": "task_schedule_enhanced",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["trigger_method", "status"],
                name="task_defini_trigger_2997b1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["is_active", "next_execution_time"],
                name="task_defini_is_acti_a5002f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["category", "created_at"], name="task_defini_categor_3dc192_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskdefinition",
            index=models.Index(
                fields=["task_target"], name="task_defini_task_ta_50d79a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taskdependencyenhanced",
            unique_together={("parent_task", "child_task")},
        ),
        migrations.AddIndex(
            model_name="taskexecutionenhanced",
            index=models.Index(
                fields=["task", "status"], name="task_execut_task_id_df88a5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionenhanced",
            index=models.Index(
                fields=["status", "created_at"], name="task_execut_status_bcc43b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionenhanced",
            index=models.Index(
                fields=["scheduled_time"], name="task_execut_schedul_87c919_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="taskexecutionenhanced",
            index=models.Index(
                fields=["worker_name", "created_at"],
                name="task_execut_worker__6303c8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tasklogenhanced",
            index=models.Index(
                fields=["task_execution", "level"],
                name="task_log_en_task_ex_4a5312_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tasklogenhanced",
            index=models.Index(
                fields=["level", "timestamp"], name="task_log_en_level_8396fa_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="taskmetricsenhanced",
            unique_together={("task", "date")},
        ),
    ]
