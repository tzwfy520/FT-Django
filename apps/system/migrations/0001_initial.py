# Generated by Django 5.2.6 on 2025-09-10 16:04

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="APIEndpoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="接口名称")),
                (
                    "endpoint_type",
                    models.CharField(
                        choices=[
                            ("stock_data", "股票数据接口"),
                            ("market_data", "市场数据接口"),
                            ("ai_model", "AI模型接口"),
                            ("notification", "通知接口"),
                            ("other", "其他接口"),
                        ],
                        max_length=20,
                        verbose_name="接口类型",
                    ),
                ),
                ("base_url", models.URLField(verbose_name="基础URL")),
                (
                    "api_key",
                    models.CharField(blank=True, max_length=255, verbose_name="API密钥"),
                ),
                (
                    "secret_key",
                    models.CharField(blank=True, max_length=255, verbose_name="密钥"),
                ),
                ("headers", models.TextField(blank=True, verbose_name="请求头(JSON格式)")),
                (
                    "timeout_seconds",
                    models.IntegerField(default=30, verbose_name="超时时间(秒)"),
                ),
                ("max_retries", models.IntegerField(default=3, verbose_name="最大重试次数")),
                (
                    "rate_limit_per_minute",
                    models.IntegerField(blank=True, null=True, verbose_name="每分钟请求限制"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否有效")),
                (
                    "last_test_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="最后测试时间"),
                ),
                (
                    "last_test_result",
                    models.BooleanField(blank=True, null=True, verbose_name="最后测试结果"),
                ),
                (
                    "test_error_message",
                    models.TextField(blank=True, verbose_name="测试错误信息"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "API接口配置",
                "verbose_name_plural": "API接口配置",
                "db_table": "api_endpoint",
                "ordering": ["endpoint_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="数据源名称"),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("mysql", "MySQL数据库"),
                            ("postgresql", "PostgreSQL数据库"),
                            ("redis", "Redis缓存"),
                            ("minio", "MinIO对象存储"),
                            ("api", "API接口"),
                            ("file", "文件系统"),
                        ],
                        max_length=20,
                        verbose_name="数据源类型",
                    ),
                ),
                ("host", models.CharField(max_length=255, verbose_name="主机地址")),
                ("port", models.IntegerField(verbose_name="端口")),
                (
                    "username",
                    models.CharField(blank=True, max_length=100, verbose_name="用户名"),
                ),
                (
                    "password",
                    models.CharField(blank=True, max_length=255, verbose_name="密码"),
                ),
                (
                    "database_name",
                    models.CharField(blank=True, max_length=100, verbose_name="数据库名"),
                ),
                (
                    "connection_params",
                    models.TextField(blank=True, verbose_name="连接参数(JSON格式)"),
                ),
                (
                    "max_connections",
                    models.IntegerField(default=10, verbose_name="最大连接数"),
                ),
                (
                    "connection_timeout",
                    models.IntegerField(default=30, verbose_name="连接超时(秒)"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否有效")),
                (
                    "last_test_time",
                    models.DateTimeField(blank=True, null=True, verbose_name="最后测试时间"),
                ),
                (
                    "last_test_result",
                    models.BooleanField(blank=True, null=True, verbose_name="最后测试结果"),
                ),
                (
                    "test_error_message",
                    models.TextField(blank=True, verbose_name="测试错误信息"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "数据源配置",
                "verbose_name_plural": "数据源配置",
                "db_table": "data_source",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SystemConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "config_key",
                    models.CharField(max_length=100, unique=True, verbose_name="配置键"),
                ),
                ("config_name", models.CharField(max_length=100, verbose_name="配置名称")),
                (
                    "config_type",
                    models.CharField(
                        choices=[
                            ("database", "数据库配置"),
                            ("api", "API配置"),
                            ("task", "任务配置"),
                            ("notification", "通知配置"),
                            ("security", "安全配置"),
                            ("other", "其他配置"),
                        ],
                        max_length=20,
                        verbose_name="配置类型",
                    ),
                ),
                ("config_value", models.TextField(verbose_name="配置值")),
                ("description", models.TextField(blank=True, verbose_name="配置描述")),
                (
                    "is_encrypted",
                    models.BooleanField(default=False, verbose_name="是否加密"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否有效")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
            ],
            options={
                "verbose_name": "系统配置",
                "verbose_name_plural": "系统配置",
                "db_table": "system_config",
                "ordering": ["config_type", "config_key"],
            },
        ),
        migrations.CreateModel(
            name="SystemMonitor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "monitor_type",
                    models.CharField(
                        choices=[
                            ("cpu", "CPU使用率"),
                            ("memory", "内存使用率"),
                            ("disk", "磁盘使用率"),
                            ("network", "网络流量"),
                            ("database", "数据库连接"),
                            ("task_queue", "任务队列"),
                        ],
                        max_length=20,
                        verbose_name="监控类型",
                    ),
                ),
                ("metric_name", models.CharField(max_length=100, verbose_name="指标名称")),
                (
                    "metric_value",
                    models.DecimalField(
                        decimal_places=4, max_digits=15, verbose_name="指标值"
                    ),
                ),
                ("metric_unit", models.CharField(max_length=20, verbose_name="单位")),
                (
                    "warning_threshold",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=15,
                        null=True,
                        verbose_name="警告阈值",
                    ),
                ),
                (
                    "critical_threshold",
                    models.DecimalField(
                        blank=True,
                        decimal_places=4,
                        max_digits=15,
                        null=True,
                        verbose_name="严重阈值",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("normal", "正常"),
                            ("warning", "警告"),
                            ("critical", "严重"),
                        ],
                        default="normal",
                        max_length=10,
                        verbose_name="状态",
                    ),
                ),
                ("timestamp", models.DateTimeField(verbose_name="监控时间")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "系统监控",
                "verbose_name_plural": "系统监控",
                "db_table": "system_monitor",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SystemNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("system", "系统通知"),
                            ("alert", "告警通知"),
                            ("task", "任务通知"),
                            ("user", "用户通知"),
                        ],
                        max_length=20,
                        verbose_name="通知类型",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "低"),
                            ("medium", "中"),
                            ("high", "高"),
                            ("urgent", "紧急"),
                        ],
                        max_length=10,
                        verbose_name="优先级",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="通知标题")),
                ("content", models.TextField(verbose_name="通知内容")),
                (
                    "recipient_emails",
                    models.TextField(blank=True, verbose_name="接收邮箱(多个用逗号分隔)"),
                ),
                ("is_sent", models.BooleanField(default=False, verbose_name="是否已发送")),
                (
                    "sent_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="发送时间"),
                ),
                ("send_error", models.TextField(blank=True, verbose_name="发送错误信息")),
                ("is_read", models.BooleanField(default=False, verbose_name="是否已读")),
                (
                    "read_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="阅读时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "recipient_users",
                    models.ManyToManyField(
                        blank=True, to=settings.AUTH_USER_MODEL, verbose_name="接收用户"
                    ),
                ),
            ],
            options={
                "verbose_name": "系统通知",
                "verbose_name_plural": "系统通知",
                "db_table": "system_notification",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DatabaseTable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table_name", models.CharField(max_length=100, verbose_name="表名")),
                (
                    "table_comment",
                    models.CharField(blank=True, max_length=255, verbose_name="表注释"),
                ),
                ("row_count", models.BigIntegerField(default=0, verbose_name="行数")),
                (
                    "data_size_mb",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="数据大小(MB)",
                    ),
                ),
                (
                    "index_size_mb",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=15,
                        verbose_name="索引大小(MB)",
                    ),
                ),
                (
                    "columns_info",
                    models.TextField(blank=True, verbose_name="列信息(JSON格式)"),
                ),
                (
                    "indexes_info",
                    models.TextField(blank=True, verbose_name="索引信息(JSON格式)"),
                ),
                (
                    "last_updated",
                    models.DateTimeField(blank=True, null=True, verbose_name="最后更新时间"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "data_source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="system.datasource",
                        verbose_name="数据源",
                    ),
                ),
            ],
            options={
                "verbose_name": "数据库表信息",
                "verbose_name_plural": "数据库表信息",
                "db_table": "database_table",
                "ordering": ["data_source", "table_name"],
                "unique_together": {("data_source", "table_name")},
            },
        ),
        migrations.CreateModel(
            name="SystemLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("DEBUG", "DEBUG"),
                            ("INFO", "INFO"),
                            ("WARNING", "WARNING"),
                            ("ERROR", "ERROR"),
                            ("CRITICAL", "CRITICAL"),
                        ],
                        max_length=10,
                        verbose_name="日志级别",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("system", "系统日志"),
                            ("user", "用户操作"),
                            ("api", "API调用"),
                            ("task", "任务执行"),
                            ("data", "数据处理"),
                            ("security", "安全相关"),
                        ],
                        max_length=20,
                        verbose_name="日志分类",
                    ),
                ),
                ("message", models.TextField(verbose_name="日志消息")),
                (
                    "module",
                    models.CharField(blank=True, max_length=100, verbose_name="模块名"),
                ),
                (
                    "function",
                    models.CharField(blank=True, max_length=100, verbose_name="函数名"),
                ),
                (
                    "line_number",
                    models.IntegerField(blank=True, null=True, verbose_name="行号"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP地址"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="用户代理")),
                (
                    "extra_data",
                    models.TextField(blank=True, verbose_name="额外数据(JSON格式)"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="日志时间"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "系统日志",
                "verbose_name_plural": "系统日志",
                "db_table": "system_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["level", "timestamp"],
                        name="system_log_level_71a78f_idx",
                    ),
                    models.Index(
                        fields=["category", "timestamp"],
                        name="system_log_categor_2a92e1_idx",
                    ),
                    models.Index(
                        fields=["user", "timestamp"],
                        name="system_log_user_id_15eb39_idx",
                    ),
                ],
            },
        ),
    ]
